이 프로젝트는 소켓 통신을 이용한 멀티플레이어 퀴즈 게임 시스템입니다. 주요 구성과 작동 방식은 다음과 같습니다:

1. 전체 구조:
- Server(서버): QuizServer 클래스가 메인 서버
- Client(클라이언트): QuizClient 클래스가 각 플레이어의 클라이언트
- Model: 게임에 필요한 데이터 구조들 (Room, Quiz, QuestionDTO 등)

2. 주요 클래스별 역할:

**서버 측:**
- QuizServer:
  - 서버 소켓을 생성하고 클라이언트 연결을 관리
  - 방 생성, 입장, 퇴장 등의 요청 처리
  - GUI를 통해 서버 상태 모니터링 가능

- GameManager:
  - 실제 게임 진행을 관리
  - 문제 출제, 답안 체크, 점수 계산
  - 타이머 관리

- ClientHandler:
  - 각 클라이언트와의 개별 통신을 담당
  - 클라이언트로부터의 메시지 처리

**클라이언트 측:**
- QuizClient:
  - 서버와의 통신 처리
  - 로비와 게임방 화면 전환 관리

- LobbyGUI:
  - 대기실 화면 구현
  - 방 목록 표시, 방 생성, 참가 기능

- ClientGUI:
  - 게임방 화면 구현
  - 문제 표시, 답변 입력 기능

**모델:**
- Room:
  - 게임방 정보 관리
  - 방 이름, 호스트, 참가자 등

- Quiz:
  - 퀴즈 문제 정보 관리
  - 문제, 답, 유형, 점수 등

- QuestionDTO:
  - 파일에서 읽어온 문제와 답을 저장
  - 데이터 전송용 객체

3. 게임 진행 순서:
1. 서버 시작
2. 클라이언트 접속
3. 방 생성 또는 참가
4. 게임 시작 (호스트가 시작)
5. 문제 출제 및 답변
6. 점수 계산 및 결과 표시

4. 데이터 처리:
- Quiz1.dat 파일에서 문제를 읽어옴
- UTF-8 인코딩으로 파일 처리
- QuizDataDAO를 통해 문제 데이터 관리

5. 통신 방식:
- ObjectInputStream/ObjectOutputStream을 사용한 소켓 통신
- 문자열 기반의 프로토콜 사용 (예: "JOIN_ROOM:", "ANSWER:" 등)

이 시스템은 서버-클라이언트 구조로 동작하며, 여러 명의 플레이어가 동시에 게임을 즐길 수 있도록 설계되어 있습니다.